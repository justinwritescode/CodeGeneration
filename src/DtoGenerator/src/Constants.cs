/*
 * Constants.cs
 *
 *   Created: 2022-12-06-08:59:23
 *   Modified: 2022-12-06-08:59:24
 *
 *   Author: Justin Chase <justin@justinwritescode.com>
 *
 *   Copyright Â© 2022-2023 Justin Chase, All Rights Reserved
 *      License: MIT (https://opensource.org/licenses/MIT)
 */

namespace JustinWritesCode.CodeGeneration;

public static partial class Constants
{
    public const string IgnoreDtoPropertyAttributeMetadataName = nameof(IgnoreDtoPropertyAttribute);
    public static readonly string IgnoreDtoPropertyAttributeDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("IgnoreDtoPropertyAttribute.cs")!).ReadToEnd();
    public const string GenerateAdditionalStuffMetadataName = nameof(GenerateAdditionalStuff);
    public static readonly string GenerateAdditionalStuffDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("GenerateAdditionalStuff.cs")!).ReadToEnd();
    public const string GenerateDtoAttributeMetadataName  = nameof(GenerateDtoAttribute);
    public static readonly string GenerateDtoAttributeDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("GenerateDtoAttribute.cs")!).ReadToEnd();
    public const string DtoTypeMetadataName = nameof(DtoTypes);
    public const string DtoPropertyAttributeMetadataName = "DtoPropertyAttribute";
    public static readonly string DtoPropertyAttributeDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("DtoPropertyAttribute.cs")!).ReadToEnd();
    public const string DataStructureTypeMetadataName = nameof(DataStructureType);
    public static readonly string DataStructureTypeDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("DataStructureType.cs")!).ReadToEnd();
    public static readonly string DtoTypeDeclaration = new StreamReader(typeof(Constants).Assembly.GetManifestResourceStream("DtoType.cs")!).ReadToEnd();

    public static readonly Scriban.Template DtoOutputTypeDeclarationTemplate = Scriban.Template.Parse(DtoOutputTypeDeclaration);

    public const string DtoOutputTypeDeclaration =
    """
    /*
     *  <auto-generated>
     *     This file was generated by JustinWritesCode.CodeGeneration.DtoGenerator.
     *     Any changes made directly to this file will be lost when the code is regenerated.
     * </auto-generated>
     *
     *  {{ filename }}
     *    Generated: {{ timestamp }}
     */

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    namespace {{ namespace }};

    public {{ data_structure_type_code }} {{ name }}
    {
        {{ for property in properties ~}}
        {{ property.required_attribute_code }}
        {{ properties_visibility_code }} {{ property.type_name_code }} {{ property.property_name }} { get; set; }
        {{ end ~}}
    }
    """;
}
